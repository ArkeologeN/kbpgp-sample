// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Decryptor, K, KeyMaterial, Packet, SHA512, box, bufeq_secure, bufferify, iced, make_esc, native_rng, pack, rsa, sign, triplesec, verify, __iced_k, __iced_k_noop, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  K = require('../../const').kb;

  triplesec = require('triplesec');

  SHA512 = require('../../hash').SHA512;

  Decryptor = triplesec.Decryptor;

  native_rng = triplesec.prng.native_rng;

  Packet = require('./base').Packet;

  _ref = require('../encode'), pack = _ref.pack, box = _ref.box;

  make_esc = require('iced-error').make_esc;

  rsa = require('../../rsa');

  _ref1 = require('../sign'), sign = _ref1.sign, verify = _ref1.verify;

  _ref2 = require('../../util'), bufeq_secure = _ref2.bufeq_secure, bufferify = _ref2.bufferify;

  KeyMaterial = (function(_super) {
    __extends(KeyMaterial, _super);

    function KeyMaterial(_arg) {
      this.key = _arg.key, this.timestamp = _arg.timestamp, this.rawkey = _arg.rawkey;
      KeyMaterial.__super__.constructor.call(this);
      this.rawkey || (this.rawkey = {});
    }

    KeyMaterial.prototype.export_public = function() {
      var pub;
      pub = this.key.pub.serialize();
      return {
        type: this.key.type,
        pub: pub,
        timestamp: this.timestamp
      };
    };

    KeyMaterial.prototype.export_key = function(opts, cb) {
      var err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          if (opts["private"]) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/keybase/packet/keymaterial.iced",
                funcname: "KeyMaterial.export_key"
              });
              _this.export_private(opts, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ret = arguments[1];
                  };
                })(),
                lineno: 31
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(ret = _this.export_public());
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    KeyMaterial.prototype.export_private = function(_arg, cb) {
      var asp, epriv, err, priv, ret, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tsenc = _arg.tsenc, asp = _arg.asp;
      ret = this.export_public();
      priv = this.key.priv.serialize();
      (function(_this) {
        return (function(__iced_k) {
          if (tsenc != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/keybase/packet/keymaterial.iced",
                funcname: "KeyMaterial.export_private"
              });
              tsenc.run({
                data: priv,
                progress_hook: asp != null ? asp.progress_hook() : void 0
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return epriv = arguments[1];
                  };
                })(),
                lineno: 43
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : ret.priv = {
                data: epriv,
                encryption: K.key_encryption.triplesec_v3
              });
            });
          } else {
            return __iced_k(ret.priv = {
              data: priv,
              encryption: K.key_encryption.none
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    KeyMaterial.alloc = function(is_private, raw) {
      var e, ret;
      ret = null;
      try {
        ret = new KeyMaterial({
          timestamp: raw.timestamp,
          rawkey: {
            type: raw.type,
            pub: raw.pub,
            priv: raw.priv
          }
        });
        if (is_private && (ret.rawkey.priv == null)) {
          throw new Error("didn't a private key");
        }
        ret.alloc_public_key();
      } catch (_error) {
        e = _error;
        throw e;
      }
      return ret;
    };

    KeyMaterial.prototype.ekid = function() {
      return this.key.ekid();
    };

    KeyMaterial.prototype.is_locked = function() {
      var _ref3, _ref4;
      return (!this.key.can_sign()) && (((_ref3 = this.rawkey) != null ? (_ref4 = _ref3.priv) != null ? _ref4.encryption : void 0 : void 0) !== K.key_encryption.none);
    };

    KeyMaterial.prototype.has_private = function() {
      var _ref3;
      return this.key.can_sign() || ((_ref3 = this.rawkey) != null ? _ref3.priv : void 0);
    };

    KeyMaterial.prototype.alloc_public_key = function() {
      var err, _ref3;
      switch (this.rawkey.type) {
        case K.public_key_algorithms.RSA:
          _ref3 = rsa.RSA.alloc({
            pub: this.rawkey.pub
          }), err = _ref3[0], this.key = _ref3[1];
          break;
        default:
          err = new Error("unknown key type: " + this.rawkey.type);
      }
      if (err != null) {
        throw err;
      }
    };

    KeyMaterial.prototype.merge_private = function(k2) {
      return this.rawkey.priv = k2.rawkey.priv;
    };

    KeyMaterial.prototype.unlock = function(_arg, cb) {
      var asp, dec, err, k, raw, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tsenc = _arg.tsenc, asp = _arg.asp;
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((k = _this.rawkey.priv) != null) {
            (function(__iced_k) {
              switch (k.encryption) {
                case K.key_encryption.triplesec_v1:
                case K.key_encryption.triplesec_v2:
                case K.key_encryption.triplesec_v3:
                  dec = new Decryptor({
                    enc: tsenc
                  });
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/kbpgp/src/keybase/packet/keymaterial.iced",
                      funcname: "KeyMaterial.unlock"
                    });
                    dec.run({
                      data: k.data,
                      progress_hook: asp.progress_hook()
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return raw = arguments[1];
                        };
                      })(),
                      lineno: 102
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(dec.scrub());
                  });
                  break;
                case K.key_encryption.none:
                  return __iced_k(raw = k.data);
                default:
                  return __iced_k(err = new Error("Unknown key encryption type: " + k.encryption));
              }
            })(function() {
              return __iced_k(err == null ? err = _this.key.read_priv(raw) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return KeyMaterial;

  })(Packet);

  exports.KeyMaterial = KeyMaterial;

}).call(this);
