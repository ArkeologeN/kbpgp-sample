// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var SignatureEngine, burn, iced, processor, __iced_k, __iced_k_noop;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  burn = require('./burner').burn;

  processor = require('./processor');

  exports.SignatureEngine = SignatureEngine = (function() {
    function SignatureEngine(_arg) {
      this.km = _arg.km;
    }

    SignatureEngine.prototype.get_km = function() {
      return this.km;
    };

    SignatureEngine.prototype.box = function(msg, cb) {
      var err, out, signing_key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = {};
      (function(_this) {
        return (function(__iced_k) {
          if ((signing_key = _this.km.find_signing_pgp_key()) != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/hilev.iced",
                funcname: "SignatureEngine.box"
              });
              burn({
                msg: msg,
                signing_key: signing_key
              }, __iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    err = arguments[0];
                    __slot_1.pgp = arguments[1];
                    return __slot_2.raw = arguments[2];
                  };
                })(out, out),
                lineno: 18
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(err = new Error("No signing key found"));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    SignatureEngine.prototype.unbox = function(msg, cb) {
      var eng;
      eng = new processor.Message({
        keyfetch: this.km
      });
      return eng.parse_and_process({
        body: msg.body
      }, cb);
    };

    return SignatureEngine;

  })();

  exports.box = burn;

  exports.unbox = processor.do_message;

}).call(this);
